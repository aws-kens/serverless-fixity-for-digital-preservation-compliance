{
    "Comment": "Serverless Fixity for Digital Preservation Compliance state mahince to compute MD5 checksum incrementally",
    "StartAt": "CheckRestoreStatus",
    "States": {
        "CheckRestoreStatus": {
            "Type": "Task",
            "Resource": "${x0}",
            "Next": "RestoreCompleted?",
            "Retry": [{
                "ErrorEquals": [
                    "States.ALL"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 4,
                "BackoffRate": 1.2
            }],
            "Catch": [{
                "ErrorEquals": [ "ChecksumError" ],
                "Next": "ChecksumError"
            }]
        },
        "RestoreCompleted?": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.RestoreStatus",
                    "StringEquals": "COMPLETED",
                    "Next": "ComputeChecksum"
                },
                {
                    "Variable": "$.RestoreRequest.Tier",
                    "StringEquals": "Expedited",
                    "Next": "Wait 4 mins"
                },
                {
                    "And": [
                        {
                            "Variable": "$.StorageClass",
                            "StringEquals": "DEEP_ARCHIVE"
                        },
                        {
                            "Variable": "$.RestoreRequest.Tier",
                            "StringEquals": "Bulk"
                        }
                    ],
                    "Next": "Wait 12 hrs"
                }
            ],
            "Default": "Wait 4 hrs"
        },
        "Wait 4 mins": {
            "Type": "Wait",
            "Seconds": 240,
            "Next": "CheckRestoreStatus"
        },
        "Wait 4 hrs": {
            "Type": "Wait",
            "Seconds": 14400,
            "Next": "CheckRestoreStatus"
        },
        "Wait 12 hrs": {
            "Type": "Wait",
            "Seconds": 43200,
            "Next": "CheckRestoreStatus"
        },
        "ComputeChecksum": {
            "Type": "Task",
            "Resource": "${x1}",
            "Next": "MoreData?",
            "Retry": [{
                "ErrorEquals": [
                    "States.ALL"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 4,
                "BackoffRate": 1.2
            }],
            "Catch": [{
                "ErrorEquals": [ "ChecksumError" ],
                "Next": "ChecksumError"
            }]
        },
        "MoreData?": {
            "Type": "Choice",
            "Choices": [{
                "Variable": "$.Status",
                "StringEquals": "COMPLETED",
                "Next": "FinalValidation"
            }],
            "Default": "ComputeChecksum"
        },
        "FinalValidation": {
            "Type": "Task",
            "Resource": "${x2}",
            "Catch": [{
                "ErrorEquals": [ "ChecksumError" ],
                "Next": "ChecksumError"
            }],
            "End": true
        },
        "ChecksumError": {
            "Type": "Task",
            "Resource": "${x3}",
            "Next": "Fail"
        },
        "Fail": {
            "Type": "Fail"
        }
    }
}
